{"version":3,"sources":["redux/types.js","redux/actions/favoritesActions.js","components/FavoriteToggle.js","redux/actions/navigateAction.js","components/WeatherCard.js","containers/CurrentWeatherContainer.js","assets/consts.js","redux/actions/apiActions.js","components/AutoCompleteInput.js","pages/Main.js","pages/Favorites.js","containers/NavigationContainer.js","App.js","redux/reducers/favoritesReducer.js","redux/reducers/apiReducer.js","redux/reducers/navigateReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["GET_CURRENT_LOCATION","GET_CURRENT_WEATHER","GET_FIVE_DAYS_FORECAST","ADD_TO_FAVORITE_LIST","REMOVE_FROM_FAVORITE_LIST","NAVIGATE_TO_FAVORITE_SCREEN","NAVIGATE_TO_HOME_SCREEN","addToFavoriteList","weatherLocation","type","payload","removeFromFavoriteList","FavoriteToggle","isFavorite","onToggle","React","useState","selected","setSelected","useEffect","Box","style","marginLeft","ToggleButton","value","onChange","event","stopPropagation","color","navigateToHomeScreen","defaultWeatherLocation","WeatherCard","item","isCurrentWeatherLoaded","setIsCurrentWeatherLoaded","dispatch","useDispatch","WeatherIcon","display","justifyContent","m","p","src","icon","Typography","noWrap","variant","component","weatherText","Grid","Card","minWidth","CardContent","disabled","onClick","title","cursor","flexDirection","flexGrow","temperature","id","CircularProgress","useStyles","makeStyles","theme","root","paper","padding","control","spacing","CurrentWeather","currentWeather","fiveDaysForecast","classes","setIsFavorite","checkIfFavorite","localStorage","getItem","Paper","className","container","map","API_KEY","TEL_AVIV","LIGHT","DARK","LOCATION_ERROR","fetchCurrentLocation","cityName","a","axios","get","then","res","data","toast","catch","err","response","request","AutoComplete","setLocation","open","setOpen","options","setOptions","term","setTerm","loading","length","onSearchSubmit","toLowerCase","onInputChange","searchTerm","target","textValidation","text","trimmedText","replace","validator","isAlpha","active","fetch","json","countries","Object","keys","key","Autocomplete","onClose","LocalizedName","getOptionSelected","option","getOptionLabel","renderInput","params","onSubmit","TextField","label","InputProps","endAdornment","Fragment","size","Main","defaultLocation","currentLocationResponse","useSelector","state","apiReducer","currentWeatherResponse","fiveDaysForecastResponse","currentWeatherObject","setCurrentWeatherObject","fiveDaysForecastArray","setFiveDaysForecastArray","currentWeatherLoaded","setCurrentWeatherLoaded","fiveDaysForecastLoaded","setFiveDaysForecastLoaded","locationSearchTerm","setLocationSearchTerm","locationKey","undefined","Key","DailyForecasts","fetchFiveDaysForecast","buildCurrentWeatherObject","buildFiveDaysForecastArray","EnglishName","Temperature","Metric","Value","WeatherText","dailyForecastsArray","i","push","convertDateToShortDayName","Date","convertAndRoundFahrenheit","Maximum","Day","Icon","IconPhrase","fahrenheit","celsiusTemp","Math","ceil","round","date","moment","format","substring","MainContent","marginBottom","AutoCompleteInput","CurrentWeatherContainer","Loading","Favorites","favoritesReducer","favoritesList","setFavoritesList","TabPanel","props","children","index","other","role","hidden","aria-labelledby","a11yProps","NavigationContainer","setSelectedTheme","navigateReducer","setValue","setDefaultLocation","navigationIndex","defaultWeatherCountry","CssBaseline","AppBar","position","backgroundColor","colors","primary","Tabs","newValue","scrollButtons","aria-label","Tab","paddingRight","IconButton","selectedTheme","useMemo","createMuiTheme","palette","entries","JSON","parse","ThemeProvider","initialState","action","indexOf","setItem","stringify","newWeatherList","filter","removeItem","rootReducers","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.988a9e69.chunk.js","sourcesContent":["export const GET_CURRENT_LOCATION = \"GET_CURRENT_LOCATION\";\r\nexport const GET_CURRENT_WEATHER = \"GET_CURRENT_WEATHER\";\r\nexport const GET_FIVE_DAYS_FORECAST = \"GET_FIVE_DAYS_FORECAST\";\r\nexport const ADD_TO_FAVORITE_LIST = \"ADD_TO_FAVORITE_LIST\";\r\nexport const REMOVE_FROM_FAVORITE_LIST = \"REMOVE_FROM_FAVORITE_LIST\";\r\nexport const ADD_FAVORITE_CURRENT_WEATHER = \"ADD_FAVORITE_CURRENT_WEATHER\";\r\nexport const NAVIGATE_TO_FAVORITE_SCREEN = \"NAVIGATE_TO_FAVORITE_SCREEN\";\r\nexport const NAVIGATE_TO_HOME_SCREEN = \"NAVIGATE_TO_HOME_SCREEN\";\r\n","import { ADD_TO_FAVORITE_LIST, REMOVE_FROM_FAVORITE_LIST } from \"../types\";\r\n\r\nexport const addToFavoriteList = (weatherLocation) => {\r\n  return {\r\n    type: ADD_TO_FAVORITE_LIST,\r\n    payload: weatherLocation,\r\n  };\r\n};\r\n\r\nexport const removeFromFavoriteList = (weatherLocation) => {\r\n  return {\r\n    type: REMOVE_FROM_FAVORITE_LIST,\r\n    payload: weatherLocation,\r\n  };\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\n\r\nconst FavoriteToggle = ({ isFavorite, onToggle }) => {\r\n  const [selected, setSelected] = React.useState(isFavorite);\r\n\r\n  useEffect(() => {\r\n    setSelected(isFavorite);\r\n  }, [isFavorite]);\r\n\r\n  const onChange = (event) => {\r\n    event.stopPropagation();\r\n    setSelected(!selected);\r\n    onToggle(selected);\r\n  };\r\n\r\n  return (\r\n    <Box style={{ marginLeft: 24 }}>\r\n      <ToggleButton value=\"check\" selected={selected} onChange={onChange}>\r\n        {selected ? <FavoriteIcon color=\"secondary\" /> : <FavoriteBorderIcon />}\r\n      </ToggleButton>\r\n    </Box>\r\n  );\r\n};\r\nexport default FavoriteToggle;\r\n","import { NAVIGATE_TO_HOME_SCREEN, NAVIGATE_TO_FAVORITE_SCREEN } from \"../types\";\r\n\r\nexport const navigateToHomeScreen = (defaultWeatherLocation) => {\r\n  return {\r\n    type: NAVIGATE_TO_HOME_SCREEN,\r\n    payload: defaultWeatherLocation,\r\n  };\r\n};\r\n\r\nexport const navigateToFavoritesScreen = () => {\r\n  return {\r\n    type: NAVIGATE_TO_FAVORITE_SCREEN,\r\n  };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport FavoriteToggle from \"../components/FavoriteToggle\";\r\nimport { navigateToHomeScreen } from \"../redux/actions/navigateAction\";\r\n\r\nconst WeatherCard = ({ item, isFavorite, onToggle }) => {\r\n  const [isCurrentWeatherLoaded, setIsCurrentWeatherLoaded] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    setIsCurrentWeatherLoaded(true);\r\n  }, [item]);\r\n\r\n  const WeatherIcon = () => {\r\n    return (\r\n      <Box>\r\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1}>\r\n          <img\r\n            src={`https://developer.accuweather.com/sites/default/files/${\r\n              item.icon < 10 ? \"0\" : \"\"\r\n            }${item.icon}-s.png`}\r\n          />\r\n        </Box>\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <Typography noWrap variant=\"body2\" component={\"span\"}>\r\n            {item.weatherText}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid key={item.id} item>\r\n      <Card style={{ minWidth: 140 }}>\r\n        <CardContent\r\n          disabled={true}\r\n          onClick={() => {\r\n            isFavorite && dispatch(navigateToHomeScreen(item.title));\r\n          }}\r\n          style={{ cursor: isFavorite ? \"pointer\" : null }}\r\n        >\r\n          <Box display=\"flex\" flexDirection=\"row\">\r\n            <Box flexGrow={1}>\r\n              <Box>\r\n                <Typography variant=\"h6\" component={\"span\"}>\r\n                  {item.title}\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Typography variant=\"body1\" component={\"span\"}>\r\n                {item.temperature}\r\n              </Typography>\r\n            </Box>\r\n\r\n            {isFavorite && (\r\n              <FavoriteToggle isFavorite onToggle={() => onToggle(item.id)} />\r\n            )}\r\n          </Box>\r\n\r\n          <Box display=\"flex\" justifyContent=\"center\">\r\n            {isCurrentWeatherLoaded ? <WeatherIcon /> : <CircularProgress />}\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport WeatherCard from \"../components/WeatherCard\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Box, Typography, Paper } from \"@material-ui/core\";\r\nimport FavoriteToggle from \"../components/FavoriteToggle\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  addToFavoriteList,\r\n  removeFromFavoriteList,\r\n} from \"../redux/actions/favoritesActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  paper: {\r\n    padding: \"12px 12px 24px 24px\",\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst CurrentWeather = ({ currentWeather, fiveDaysForecast }) => {\r\n  const classes = useStyles();\r\n  const [isFavorite, setIsFavorite] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    checkIfFavorite();\r\n  }, []);\r\n\r\n  const onFavoriteToggle = () => {\r\n    setIsFavorite(!isFavorite);\r\n\r\n    !isFavorite\r\n      ? dispatch(addToFavoriteList(currentWeather))\r\n      : dispatch(removeFromFavoriteList(currentWeather.id));\r\n  };\r\n\r\n  const checkIfFavorite = () => {\r\n    if (localStorage.getItem(currentWeather.id)) {\r\n      setIsFavorite(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper variant=\"outlined\" className={classes.paper}>\r\n      <Box\r\n        component=\"span\"\r\n        display=\"flex\"\r\n        style={{ padding: \"24px 24px 48px 0px\" }}\r\n      >\r\n        <Box>\r\n          <img\r\n            src={`https://developer.accuweather.com/sites/default/files/${\r\n              currentWeather.icon < 10 ? \"0\" : \"\"\r\n            }${currentWeather.icon}-s.png`}\r\n          />\r\n        </Box>\r\n        <Box flexGrow={1}>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {currentWeather.title}\r\n          </Typography>\r\n\r\n          <Typography variant=\"body1\" component=\"span\">\r\n            {currentWeather.weatherText}\r\n          </Typography>\r\n\r\n          <Typography variant=\"h4\" component=\"h2\" color={\"primary\"}>\r\n            {currentWeather.temperature}\r\n          </Typography>\r\n        </Box>\r\n        {<FavoriteToggle isFavorite={isFavorite} onToggle={onFavoriteToggle} />}\r\n      </Box>\r\n      <Grid container className={classes.root} spacing={3}>\r\n        {fiveDaysForecast.map((item) => (\r\n          <WeatherCard\r\n            key={item.id}\r\n            item={item}\r\n            isFavorite={false}\r\n            onToggle={() => {}}\r\n          />\r\n        ))}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","export const API_KEY = \"Bfxky9xqV7951oHn6ukkSEgYUgLcN0p6\";\r\n\r\nexport const TEL_AVIV = \"tel aviv\";\r\nexport const CELCIUS_SIGN = \"C°\";\r\nexport const FAHRENHEIT_SIGN = \"F°\";\r\nexport const LIGHT = \"light\";\r\nexport const DARK = \"dark\";\r\nexport const LOCATION_ERROR = \"oops something went wrong...\";\r\nexport const LOCATION_NOT_FOUND = \"Location not found\";\r\n","import {\r\n  GET_CURRENT_LOCATION,\r\n  GET_CURRENT_WEATHER,\r\n  GET_FIVE_DAYS_FORECAST,\r\n} from \"../types\";\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n  API_KEY,\r\n  LOCATION_ERROR,\r\n  LOCATION_NOT_FOUND,\r\n} from \"../../assets/consts\";\r\nimport toast from \"react-simple-toasts\";\r\n\r\nexport const fetchCurrentLocation = (cityName) => {\r\n  return async (dispatch) => {\r\n    return axios\r\n      .get(\r\n        `https://dataservice.accuweather.com/locations/v1/cities/search?apikey=${API_KEY}&q=${cityName}`\r\n      )\r\n      .then((res) => {\r\n        if (res.data[0]) {\r\n          dispatch({\r\n            type: GET_CURRENT_LOCATION,\r\n            payload: res.data[0],\r\n          });\r\n        } else {\r\n          toast(LOCATION_NOT_FOUND);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response) {\r\n          // client received an error response (5xx, 4xx)\r\n          toast(LOCATION_ERROR + \"\\n\" + err.response);\r\n        } else if (err.request) {\r\n          // client never received a response, or request never left\r\n          toast(LOCATION_ERROR);\r\n        }\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchCurrentWeather = (locationKey) => {\r\n  return async (dispatch) => {\r\n    return axios\r\n      .get(\r\n        `https://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${API_KEY}`\r\n      )\r\n      .then((res) => {\r\n        dispatch({\r\n          type: GET_CURRENT_WEATHER,\r\n          payload: res.data[0],\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response) {\r\n          // client received an error response (5xx, 4xx)\r\n          toast(LOCATION_ERROR + \"\\n\" + err.response);\r\n        } else if (err.request) {\r\n          // client never received a response, or request never left\r\n          toast(LOCATION_ERROR);\r\n        }\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchFiveDaysForecast = (locationKey) => {\r\n  return async (dispatch) => {\r\n    return axios\r\n      .get(\r\n        `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}`\r\n      )\r\n      .then((res) => {\r\n        dispatch({\r\n          type: GET_FIVE_DAYS_FORECAST,\r\n          payload: res.data.DailyForecasts,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response) {\r\n          // client received an error response (5xx, 4xx)\r\n          toast(LOCATION_ERROR + \"\\n\" + err.response);\r\n        } else if (err.request) {\r\n          // client never received a response, or request never left\r\n          toast(LOCATION_ERROR);\r\n        }\r\n      });\r\n  };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { TextField, CircularProgress } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { API_KEY } from \"../assets/consts\";\r\nimport fetch from \"cross-fetch\";\r\nimport toast from \"react-simple-toasts\";\r\nimport validator from \"validator\";\r\n\r\nconst AutoComplete = ({ setLocation }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [term, setTerm] = useState(\"\");\r\n\r\n  const loading = open && options.length === 0;\r\n\r\n  const onSearchSubmit = () => {\r\n    setLocation(term.toLowerCase());\r\n  };\r\n\r\n  const onInputChange = (event) => {\r\n    const searchTerm = event.target.value;\r\n\r\n    if (textValidation(searchTerm)) {\r\n      searchTerm ? setOpen(true) : setOpen(false);\r\n      setTerm(searchTerm);\r\n    } else {\r\n      toast(\"Please search in English only\", 2000);\r\n    }\r\n  };\r\n\r\n  const textValidation = (text) => {\r\n    if (!text.length) return true;\r\n    const trimmedText = text.replace(/\\s/g, \"\");\r\n    return validator.isAlpha(trimmedText);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n    if (!loading) return undefined;\r\n\r\n    (async () => {\r\n      const response = await fetch(\r\n        `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${term}`\r\n      );\r\n      const countries = await response.json();\r\n      if (active)\r\n        setOptions(Object.keys(countries).map((key) => countries[key]));\r\n    })();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    if (!open) setOptions([]);\r\n  }, [open]);\r\n\r\n  const onClose = () => {\r\n    setTerm(\"\");\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      open={open}\r\n      onClose={onClose}\r\n      onChange={(event, value) => {\r\n        setLocation(value.LocalizedName.toLowerCase());\r\n      }}\r\n      getOptionSelected={(option, value) =>\r\n        option.LocalizedName === value.LocalizedName\r\n      }\r\n      getOptionLabel={(option) => option.LocalizedName}\r\n      options={options}\r\n      loading={loading}\r\n      renderInput={(params) => (\r\n        <form onSubmit={onSearchSubmit}>\r\n          <TextField\r\n            onChange={onInputChange}\r\n            {...params}\r\n            label=\"Search...\"\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <React.Fragment>\r\n                  {loading ? (\r\n                    <CircularProgress color=\"inherit\" size={20} />\r\n                  ) : null}\r\n                  {params.InputProps.endAdornment}\r\n                </React.Fragment>\r\n              ),\r\n            }}\r\n          />\r\n        </form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AutoComplete;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Box, CircularProgress, Container } from \"@material-ui/core\";\r\nimport CurrentWeatherContainer from \"../containers/CurrentWeatherContainer\";\r\nimport { CELCIUS_SIGN } from \"../assets/consts\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n  fetchCurrentLocation,\r\n  fetchCurrentWeather,\r\n  fetchFiveDaysForecast,\r\n} from \"../redux/actions/apiActions\";\r\n\r\nimport { navigateToHomeScreen } from \"../redux/actions/navigateAction\";\r\n\r\nimport AutoCompleteInput from \"../components/AutoCompleteInput\";\r\n\r\nconst Main = ({ defaultLocation }) => {\r\n  const { currentLocationResponse } = useSelector((state) => state.apiReducer);\r\n  const { currentWeatherResponse } = useSelector((state) => state.apiReducer);\r\n  const { fiveDaysForecastResponse } = useSelector((state) => state.apiReducer);\r\n\r\n  const [currentWeatherObject, setCurrentWeatherObject] = useState({});\r\n  const [fiveDaysForecastArray, setFiveDaysForecastArray] = useState({});\r\n\r\n  const [currentWeatherLoaded, setCurrentWeatherLoaded] = useState(false);\r\n  const [fiveDaysForecastLoaded, setFiveDaysForecastLoaded] = useState(false);\r\n\r\n  const [locationSearchTerm, setLocationSearchTerm] = useState(defaultLocation);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateToHomeScreen(locationSearchTerm));\r\n    dispatch(fetchCurrentLocation(defaultLocation));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      currentLocationResponse !== undefined &&\r\n      currentLocationResponse.length !== 0\r\n    ) {\r\n      dispatch(fetchCurrentWeather(currentLocationResponse.Key));\r\n      dispatch(fetchFiveDaysForecast(currentLocationResponse.Key));\r\n    }\r\n  }, [currentLocationResponse]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      currentWeatherResponse !== undefined &&\r\n      currentWeatherResponse.length !== 0\r\n    ) {\r\n      buildCurrentWeatherObject();\r\n    }\r\n  }, [currentWeatherResponse]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      fiveDaysForecastResponse !== undefined &&\r\n      fiveDaysForecastResponse.length !== 0\r\n    ) {\r\n      buildFiveDaysForecastArray();\r\n    }\r\n  }, [fiveDaysForecastResponse]);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCurrentLocation(locationSearchTerm));\r\n  }, [locationSearchTerm]);\r\n\r\n  const buildCurrentWeatherObject = () => {\r\n    const currentWeatherObject = {\r\n      id: currentLocationResponse.Key,\r\n      title: currentLocationResponse.EnglishName,\r\n      temperature:\r\n        currentWeatherResponse.Temperature.Metric.Value + CELCIUS_SIGN,\r\n      icon: currentWeatherResponse.WeatherIcon,\r\n      weatherText: currentWeatherResponse.WeatherText,\r\n    };\r\n    setCurrentWeatherObject(currentWeatherObject);\r\n    setCurrentWeatherLoaded(true);\r\n  };\r\n\r\n  const buildFiveDaysForecastArray = () => {\r\n    let dailyForecastsArray = [];\r\n\r\n    for (let i in fiveDaysForecastResponse) {\r\n      dailyForecastsArray.push({\r\n        id: i,\r\n        title: convertDateToShortDayName(fiveDaysForecastResponse[i].Date),\r\n        temperature: convertAndRoundFahrenheit(\r\n          fiveDaysForecastResponse[i].Temperature.Maximum.Value\r\n        ),\r\n        icon: fiveDaysForecastResponse[i].Day.Icon,\r\n        weatherText: fiveDaysForecastResponse[i].Day.IconPhrase,\r\n      });\r\n    }\r\n\r\n    setFiveDaysForecastArray(dailyForecastsArray);\r\n\r\n    setCurrentWeatherLoaded(true);\r\n    setFiveDaysForecastLoaded(true);\r\n  };\r\n\r\n  const convertAndRoundFahrenheit = (fahrenheit) => {\r\n    const celsiusTemp = ((fahrenheit - 32) * 5) / 9;\r\n    return Math.ceil(Math.round(celsiusTemp * 10) / 10) + CELCIUS_SIGN;\r\n  };\r\n\r\n  const convertDateToShortDayName = (date) => {\r\n    return moment(date).format(\"dddd\").substring(0, 3);\r\n  };\r\n\r\n  const MainContent = () => {\r\n    return (\r\n      <Box>\r\n        <Box style={{ marginBottom: 24 }}>\r\n          <AutoCompleteInput\r\n            setLocation={(cityName) => setLocationSearchTerm(cityName)}\r\n          />\r\n        </Box>\r\n\r\n        <CurrentWeatherContainer\r\n          currentWeather={currentWeatherObject}\r\n          fiveDaysForecast={fiveDaysForecastArray}\r\n        />\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const Loading = () => {\r\n    return (\r\n      <div display={\"flex\"}>\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return currentWeatherLoaded && fiveDaysForecastLoaded ? (\r\n    <MainContent />\r\n  ) : (\r\n    <Loading />\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport WeatherCard from \"../components/WeatherCard\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { removeFromFavoriteList } from \"../redux/actions/favoritesActions\";\r\nimport { navigateToFavoritesScreen } from \"../redux/actions/navigateAction\";\r\n\r\nconst Favorites = () => {\r\n  const favoritesReducer = useSelector((state) => state.favoritesReducer);\r\n  const [favoritesList, setFavoritesList] = useState(favoritesReducer);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(navigateToFavoritesScreen());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setFavoritesList(favoritesReducer);\r\n  }, [favoritesReducer]);\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      {favoritesList.map((item) => (\r\n        <WeatherCard\r\n          key={item.id}\r\n          item={item}\r\n          isFavorite\r\n          onToggle={(key) => dispatch(removeFromFavoriteList(key))}\r\n        />\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Favorites;\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport Main from \"../pages/Main\";\r\nimport Favorites from \"../pages/Favorites\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { DARK, LIGHT, TEL_AVIV } from \"../assets/consts\";\r\nimport Moon from \"@material-ui/icons/Brightness2\";\r\nimport Sun from \"@material-ui/icons/WbSunny\";\r\nimport { colors, IconButton } from \"@material-ui/core\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-prevent-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-prevent-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography component={\"span\"}>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-prevent-tab-${index}`,\r\n    \"aria-controls\": `scrollable-prevent-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst NavigationContainer = ({ theme, setSelectedTheme }) => {\r\n  const navigateReducer = useSelector((state) => state.navigateReducer);\r\n  const [value, setValue] = React.useState(0);\r\n  const [defaultLocation, setDefaultLocation] = React.useState(TEL_AVIV);\r\n\r\n  useEffect(() => {\r\n    if (value && !navigateReducer.navigationIndex) {\r\n      setDefaultLocation(navigateReducer.defaultWeatherCountry);\r\n      setValue(0);\r\n    }\r\n  }, [navigateReducer]);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const changeTheme = () => {\r\n    theme === LIGHT ? setSelectedTheme(DARK) : setSelectedTheme(LIGHT);\r\n  };\r\n\r\n  const icon = theme === LIGHT ? <Moon /> : <Sun />;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n\r\n      <AppBar\r\n        position=\"static\"\r\n        style={\r\n          theme === DARK\r\n            ? { backgroundColor: \"#303030\" }\r\n            : { backgroundColor: colors.primary }\r\n        }\r\n      >\r\n        <Box display=\"flex\">\r\n          <Box flexGrow={1}>\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              variant=\"scrollable\"\r\n              scrollButtons=\"off\"\r\n              aria-label=\"scrollable prevent tabs example\"\r\n            >\r\n              <Tab icon={<HomeIcon />} aria-label=\"home\" {...a11yProps(0)} />\r\n              <Tab\r\n                icon={<FavoriteIcon />}\r\n                aria-label=\"favorite\"\r\n                {...a11yProps(1)}\r\n              />\r\n            </Tabs>\r\n          </Box>\r\n          <Box style={{ paddingRight: 24 }}>\r\n            <IconButton\r\n              style={{ color: \"white\" }}\r\n              onClick={changeTheme}\r\n              children={icon}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </AppBar>\r\n      <TabPanel\r\n        value={value}\r\n        index={0}\r\n        children={<Main defaultLocation={defaultLocation} />}\r\n      />\r\n      <TabPanel value={value} index={1} children={<Favorites />} />\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default NavigationContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addToFavoriteList } from \"./redux/actions/favoritesActions\";\r\nimport NavigationContainer from \"./containers/NavigationContainer\";\r\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { LIGHT } from \"./assets/consts\";\r\n\r\nconst Main = () => {\r\n  const [selectedTheme, setSelectedTheme] = useState(LIGHT);\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: selectedTheme,\r\n        },\r\n      }),\r\n    [selectedTheme]\r\n  );\r\n\r\n  useEffect(() => {\r\n    for (let [, value] of Object.entries(localStorage)) {\r\n      dispatch(addToFavoriteList(JSON.parse(value)));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <NavigationContainer\r\n        theme={selectedTheme}\r\n        setSelectedTheme={setSelectedTheme}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { ADD_TO_FAVORITE_LIST, REMOVE_FROM_FAVORITE_LIST } from \"../types\";\r\n\r\nconst initialState = [];\r\n\r\nconst favoritesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_FAVORITE_LIST: {\r\n      if (state.indexOf(action.payload) === -1) state.push(action.payload);\r\n\r\n      // Add location key and city name in localStorage\r\n      localStorage.setItem(action.payload.id, JSON.stringify(action.payload));\r\n\r\n      return state;\r\n    }\r\n\r\n    case REMOVE_FROM_FAVORITE_LIST: {\r\n      const newWeatherList = state.filter((item) => item.id !== action.payload);\r\n      state = newWeatherList;\r\n\r\n      // Remove location key and city name from localStorage\r\n      localStorage.removeItem(action.payload);\r\n      return state;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default favoritesReducer;\r\n","import {\r\n  GET_CURRENT_LOCATION,\r\n  GET_CURRENT_WEATHER,\r\n  GET_FIVE_DAYS_FORECAST,\r\n} from \"../types\";\r\n\r\nconst initialState = {\r\n  currentLocationResponse: [],\r\n  currentWeatherResponse: [],\r\n  fiveDaysForecastResponse: [],\r\n};\r\n\r\nconst apiReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_CURRENT_LOCATION: {\r\n      return {\r\n        ...state,\r\n        currentLocationResponse: action.payload,\r\n      };\r\n    }\r\n    case GET_CURRENT_WEATHER: {\r\n      return {\r\n        ...state,\r\n        currentWeatherResponse: action.payload,\r\n      };\r\n    }\r\n    case GET_FIVE_DAYS_FORECAST: {\r\n      return {\r\n        ...state,\r\n        fiveDaysForecastResponse: action.payload,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default apiReducer;\r\n","import { TEL_AVIV } from \"../../assets/consts\";\r\nimport { NAVIGATE_TO_HOME_SCREEN, NAVIGATE_TO_FAVORITE_SCREEN } from \"../types\";\r\n\r\nconst initialState = {\r\n  navigationIndex: 0,\r\n  defaultWeatherCountry: TEL_AVIV,\r\n};\r\nconst navigateReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case NAVIGATE_TO_HOME_SCREEN: {\r\n      return {\r\n        ...state,\r\n        navigationIndex: 0,\r\n        defaultWeatherCountry: action.payload,\r\n      };\r\n    }\r\n\r\n    case NAVIGATE_TO_FAVORITE_SCREEN: {\r\n      return {\r\n        ...state,\r\n        navigationIndex: 1,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default navigateReducer;\r\n","import favoritesReducer from \"./favoritesReducer\";\r\nimport apiReducer from \"./apiReducer\";\r\nimport navigateReducer from \"./navigateReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducers = combineReducers({\r\n  favoritesReducer,\r\n  apiReducer,\r\n  navigateReducer,\r\n});\r\n\r\nexport default rootReducers;\r\n","import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initalState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initalState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}